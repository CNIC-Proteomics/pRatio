<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="txtAbout.Text" xml:space="preserve">
    <value>This program calculates the probability of random peptide matching and the FDR (False Discovery Rate) when a large collection of MS/MS spectra is searched against a database using SEQUEST. The program uses the “probability ratio method”, as described in the paper by Martínez-Bartolomé et al. (1), defined as the ratio of average probabilities of the first and the second best scores. This program has three main advantages: a) it is non- parametric (no curve fitting is needed), b) it does not require spectra classification according to properties such as charge state and c) its peptide identification performance is similar or even better than other existing methods. This method, by its simplicity, robustness and sensitivity is recommended for the unattended analysis of large collections of MS/MS spectra.

The method requires that the MS/MS spectra are searched against a target database and also against a decoy database. The decoy database must be constructed from the real one by inversion or randomization of protein sequences (2), and is used to determine the FDR associated to peptide identification. In contrast with other algorithms, the probability ratio does not need searching against a concatenated database.

Outputs from SEQUEST must be in srf or msf format. The program supports the analysis of multiple srf/msf files (i.e. those obtained from a collection of raw files in a multidimensional chromatography experiment), and generates a single output file.

More information about pRatio is available at its corresponding article in the laboratory wiki, at http://150.244.205.155/mediawiki/index.php/PRatio

This program was written in C#. Note that this program is not error-free.

This program was written by Dr. Pedro Navarro, Marco Trevisan-Herraz and Dr. Jesús Vázquez. For any questions or suggestions, please email to mtrevisan@cbm.uam.es or navarro@imsb.biol.ethz.ch</value>
  </data>
  <data name="txtBCommands.Text" xml:space="preserve">
    <value>Information

Please, for up-to-date information, check the concerning article within the project wiki at:
http://150.244.205.155/mediawiki/index.php/PRatio

Requirements

•	Xcalibur 2.0 or 2.1
•	Bioworks 3.2 (any release)
•	BioUnifiedFile.dll
•	.NET framework 3.5 or upper.

Installation

If you want to use .srf files with BioWorks 3.2 you must install the BioUnifiedFile.dll: Copy the BioUnifiedFile.dll in the following folder: 

c:\Xcalibur\system\programs\BioWorksBrowser\

and execute the following sentence in your “run command” menu: 

regsvr32 c:\Xcalibur\system\programs\BioWorksBrowser\BioUnifiedFile.dll

Usage

1.  Select the main folder containing the srf files (or msf files if Xcalibur 2.1 with Proteome Discoverer is used) obtained after searching the MS/MS spectra against a target database.

2. Select the main folder containing the srf or msf files obtained after searching the MS/MS spectra against a decoy database. These files must have the same name as their corresponding srf files obtained for the target database search.

3. Select a reasonable FDR cut-off for the experiment you want to analyze. A recommended value is 0.01, but cut-off values as high as 0.05 or even 0.1 may be used to inspect lower-confidence assignations.

4. If your experiment have been separated by a pI separation technique, we recommend to click on use pI as a probability factor for improving your results.

5. Choose a Quality determination method for your analysis. There are four methods, depending on the score that is used to estimate spectrum quality (second, third or fourth). Quality can also be estimated by an averaged estimation using these three scores.

6. If you want an output in pepXML format, click in the write a pepXML results file button; it will be necessary to indicate the search parameters file used by SEQUEST for doing the search.

7. Just press Run !! 

Results

Two outputs are automatically generated and placed into the main folder containing the srf results obtained against the conventional database. They are named using the parental folder name. For instance, if the parental folder is called “Example1”, the following files would be created:

Example1_QuiXML.xml : a XML file that containing all the information related to peptide identification in QuiXML format. This is a xml scheme used in our laboratory to make quantitative proteomics; information about this structure and the parameters included will soon be posted in this webpage.   

Example1_pepXML.xml :  a XML file that containing all the information related to peptide identification in pepXML format, a standard format recommended by the HUPO-PSI organization. 


(1).	S. Martínez Bartolomé, F. Martín-Maroto, P. Navarro, D. López-Ferrer, A. Ramos-Fernández, M.Villar, J. P. García-Ruiz, J. Vázquez. “In Revision. Properties of average score distributions of SEQUEST: the probability ratio method”.

(2). 	Elias, J. E. and S. P. Gygi (2007). "Target-decoy search strategy for increased confidence in large-scale protein identifications by mass spectrometry." Nat Methods 4(3): 207-14.</value>
  </data>
</root>